pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'shaikabdul431/ultimate-cicd:18'
        CUSTOM_BUILDER_IMAGE = 'shaikabdul431/maven-java17-ultimate-ci-cd-project-image:v2'
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub'
    }

    stages {
        stage('Clone Repo') {
            steps {
                checkout scm
            }
        }

        stage('Debug') {
            steps {
                sh 'echo "Current directory:" && pwd && ls -al'
            }
        }

        stage('Maven Build (Using Custom Image)') {
            agent {
                docker {
                    image "${CUSTOM_BUILDER_IMAGE}"
                    args '-u root:root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'mvn clean install'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    withEnv([
                        'SONAR_HOST_URL=https://sonarcloud.io',
                        'SONAR_SCANNER_OPTS=-Dsonar.projectKey=YourProjectKey'
                    ]) {
                        dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                            sh 'mvn sonar:sonar -Dsonar.token=$SONAR_TOKEN'
                        }
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            sh """
                                echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                                docker build -t $DOCKER_IMAGE .
                                docker push $DOCKER_IMAGE
                            """
                        }
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                echo 'Updating deployment manifest with new image tag...'
                // Add your logic here if needed
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo 'Deploying to Kubernetes cluster...'
                // Add your logic here if needed
            }
        }
    }

    post {
        failure {
            echo 'Pipeline failed!'
        }
        success {
            echo 'Pipeline succeeded!'
        }
    }
}
